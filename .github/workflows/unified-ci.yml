name: Unified CI Pipeline

on:
  push:
    branches: [ main, master, develop ]
  pull_request:
    branches: [ main, master, develop ]
  schedule:
    - cron: '0 2 * * 1' # Weekly on Monday at 2 AM UTC
  workflow_dispatch: # Allows manual triggering of the workflow
    inputs:
      run_sonarqube_sync:
        description: 'Force run SonarQube issue sync'
        required: false
        default: 'false'
        type: boolean

env:
  SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
  GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

jobs:
  test-javascript:
    name: JavaScript Tests
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0 # Shallow clones should be disabled for better analysis
    
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        cache: 'npm'
    
    - name: Install dependencies
      run: npm ci
    
    - name: Run JavaScript tests with coverage
      run: npm test -- --coverage --coverageReporters=text-lcov --coverageReporters=json
    
    - name: Upload JavaScript coverage to Codecov
      uses: codecov/codecov-action@v3
      with:
        file: ./coverage/lcov.info
        flags: javascript
        name: javascript-coverage
    
    - name: Archive JavaScript coverage results
      uses: actions/upload-artifact@v4
      with:
        name: javascript-coverage
        path: coverage/

  test-python:
    name: Python Tests
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest, windows-latest, macos-latest]
        python-version: ['3.8', '3.9', '3.10', '3.11', '3.12']
        exclude:
          # Exclude some combinations to reduce CI time while maintaining good coverage
          - os: windows-latest
            python-version: '3.8'
          - os: macos-latest
            python-version: '3.8'
          - os: macos-latest
            python-version: '3.11'
          - os: macos-latest
            python-version: '3.12'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0
    
    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ matrix.python-version }}
        cache: 'pip'
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install pytest pytest-cov
    
    - name: Run Python tests with coverage
      run: |
        pytest tests/ --cov=src/python --cov-report=xml --cov-report=term-missing
    
    - name: Upload Python coverage to Codecov
      uses: codecov/codecov-action@v3
      with:
        file: ./coverage.xml
        flags: python
        name: python-coverage-${{ matrix.os }}-${{ matrix.python-version }}
    
    - name: Archive Python coverage results
      uses: actions/upload-artifact@v4
      if: matrix.os == 'ubuntu-latest' && matrix.python-version == '3.9'
      with:
        name: python-coverage
        path: coverage.xml

  test-java:
    name: Java Tests
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0
    
    - name: Set up JDK 17
      uses: actions/setup-java@v3
      with:
        java-version: '17'
        distribution: 'temurin'
    
    - name: Cache Maven dependencies
      uses: actions/cache@v3
      with:
        path: ~/.m2
        key: ${{ runner.os }}-m2-${{ hashFiles('**/pom.xml') }}
        restore-keys: ${{ runner.os }}-m2
    
    - name: Compile and run Java tests with coverage
      run: |
        if [ -f "pom.xml" ]; then
          mvn clean compile test-compile test jacoco:report
        elif [ -f "build.gradle" ]; then
          ./gradlew compileJava compileTestJava test jacocoTestReport
        else
          echo "No Java build file found, skipping Java tests"
        fi
    
    - name: Upload Java coverage to Codecov
      uses: codecov/codecov-action@v3
      if: success()
      with:
        file: ./target/site/jacoco/jacoco.xml
        flags: java
        name: java-coverage

  sonarcloud:
    name: SonarCloud Analysis
    runs-on: ubuntu-latest
    needs: [test-javascript, test-python, test-java]
    if: github.event_name != 'schedule' # Skip SonarCloud on scheduled runs
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0 # Shallow clones should be disabled for SonarCloud analysis
    
    - name: Setup Node.js for SonarCloud
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        cache: 'npm'
    
    - name: Set up Python for SonarCloud
      uses: actions/setup-python@v4
      with:
        python-version: '3.9'
        cache: 'pip'
    
    - name: Set up JDK 17 for SonarCloud
      uses: actions/setup-java@v3
      with:
        java-version: '17'
        distribution: 'temurin'
    
    - name: Cache Maven dependencies
      uses: actions/cache@v3
      with:
        path: ~/.m2
        key: ${{ runner.os }}-m2-${{ hashFiles('**/pom.xml') }}
        restore-keys: ${{ runner.os }}-m2
    
    - name: Install JavaScript dependencies
      run: npm ci
    
    - name: Install Python dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install pytest pytest-cov
    
    - name: Compile Java for SonarCloud
      run: |
        if [ -f "pom.xml" ]; then
          mvn clean compile test-compile
          # Create dependency directory even if no runtime dependencies exist
          mkdir -p target/dependency
          # Copy dependencies if any exist (this will include test dependencies)
          mvn dependency:copy-dependencies -DincludeScope=test 2>/dev/null || true
        elif [ -f "build.gradle" ]; then
          ./gradlew compileJava compileTestJava
        else
          echo "No Java build file found, skipping Java compilation"
        fi
    
    - name: Download JavaScript coverage
      uses: actions/download-artifact@v4
      with:
        name: javascript-coverage
        path: coverage/
    
    - name: Download Python coverage
      uses: actions/download-artifact@v4
      with:
        name: python-coverage
        path: ./
    
    - name: Run tests for SonarCloud
      run: |
        # Run JavaScript tests
        npm test -- --coverage --coverageReporters=lcov
        # Run Python tests
        pytest tests/ --cov=src/python --cov-report=xml
        # Run Java tests with coverage
        if [ -f "pom.xml" ]; then
          mvn test jacoco:report
        elif [ -f "build.gradle" ]; then
          ./gradlew test jacocoTestReport
        else
          echo "No Java build file found, skipping Java tests"
        fi
    
    - name: SonarCloud Scan
      uses: SonarSource/sonarcloud-github-action@master
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}

  sync-sonarqube-issues:
    name: Sync SonarQube Issues
    runs-on: ubuntu-latest
    needs: [sonarcloud]
    if: github.event_name == 'schedule' || (github.event_name == 'workflow_dispatch' && github.event.inputs.run_sonarqube_sync == 'true')
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Install required tools
      run: |
        echo "Installing required tools for SonarCloud issue synchronization..."
        # Install jq for JSON parsing
        sudo apt-get update
        sudo apt-get install -y jq curl
        
        # Install GitHub CLI
        curl -fsSL https://cli.github.com/packages/githubcli-archive-keyring.gpg | sudo dd of=/usr/share/keyrings/githubcli-archive-keyring.gpg
        sudo chmod go+r /usr/share/keyrings/githubcli-archive-keyring.gpg
        echo "deb [arch=$(dpkg --print-architecture) signed-by=/usr/share/keyrings/githubcli-archive-keyring.gpg] https://cli.github.com/packages stable main" | sudo tee /etc/apt/sources.list.d/github-cli.list > /dev/null
        sudo apt-get update
        sudo apt-get install -y gh
    
    - name: Fetch SonarCloud issues
      id: sonar-issues
      run: |
        echo "Fetching issues from SonarCloud..."
        
        # Extract organization and project key from repository
        GITHUB_ORG="$(echo $GITHUB_REPOSITORY | cut -d'/' -f1)"
        PROJECT_KEY="${GITHUB_ORG}_$(echo $GITHUB_REPOSITORY | cut -d'/' -f2)"
        
        echo "Using project key: $PROJECT_KEY"
        echo "project_key=$PROJECT_KEY" >> $GITHUB_OUTPUT
        
        # Fetch issues from SonarCloud API
        # Note: You may need to adjust the project key format based on your SonarCloud setup
        SONAR_ISSUES_RESPONSE=$(curl -s -u "$SONAR_TOKEN:" \
          "https://sonarcloud.io/api/issues/search?componentKeys=$PROJECT_KEY&statuses=OPEN,CONFIRMED,REOPENED&types=BUG,VULNERABILITY,CODE_SMELL&ps=500")
        
        # Save the response for processing
        echo "$SONAR_ISSUES_RESPONSE" > sonar_issues.json
        
        # Check if we got valid data
        if ! echo "$SONAR_ISSUES_RESPONSE" | jq -e '.issues' > /dev/null 2>&1; then
          echo "❌ Failed to fetch SonarCloud issues or no issues found"
          echo "Response: $SONAR_ISSUES_RESPONSE"
          exit 1
        fi
        
        ISSUE_COUNT=$(echo "$SONAR_ISSUES_RESPONSE" | jq '.issues | length')
        echo "Found $ISSUE_COUNT SonarCloud issues"
        echo "issue_count=$ISSUE_COUNT" >> $GITHUB_OUTPUT
    
    - name: Sync issues to GitHub
      if: steps.sonar-issues.outputs.issue_count > 0
      run: |
        echo "Syncing SonarCloud issues to GitHub..."
        
        # Authenticate with GitHub CLI
        echo "$GITHUB_TOKEN" | gh auth login --with-token
        
        # Create a sync report file
        echo "# SonarCloud Issue Sync Report" > sync_report.md
        echo "Synchronized on: $(date)" >> sync_report.md
        echo "" >> sync_report.md
        
        SYNCED_COUNT=0
        UPDATED_COUNT=0
        CREATED_COUNT=0
        
        # Process each SonarCloud issue
        cat sonar_issues.json | jq -c '.issues[]' | while read -r issue; do
          # Extract issue details
          ISSUE_KEY=$(echo "$issue" | jq -r '.key')
          ISSUE_TYPE=$(echo "$issue" | jq -r '.type')
          ISSUE_SEVERITY=$(echo "$issue" | jq -r '.severity')
          ISSUE_MESSAGE=$(echo "$issue" | jq -r '.message')
          ISSUE_COMPONENT=$(echo "$issue" | jq -r '.component')
          ISSUE_LINE=$(echo "$issue" | jq -r '.line // "N/A"')
          ISSUE_STATUS=$(echo "$issue" | jq -r '.status')
          
          # Create GitHub issue title
          GITHUB_TITLE="[SonarCloud] $ISSUE_TYPE: $ISSUE_MESSAGE"
          
          # Create GitHub issue body
          GITHUB_BODY="## SonarCloud Issue Details

**Issue Key:** \`$ISSUE_KEY\`  
**Type:** $ISSUE_TYPE  
**Severity:** $ISSUE_SEVERITY  
**Status:** $ISSUE_STATUS  
**Component:** \`$ISSUE_COMPONENT\`  
**Line:** $ISSUE_LINE  

**Message:** $ISSUE_MESSAGE  

---  
*This issue was automatically synchronized from SonarCloud.*  
*SonarCloud Issue Key: $ISSUE_KEY*"
          
          # Check if GitHub issue already exists (search by SonarCloud key)
          EXISTING_ISSUE=$(gh issue list --search "$ISSUE_KEY in:body" --json number,title,state --jq '.[0].number // empty')
          
          if [ -n "$EXISTING_ISSUE" ]; then
            echo "Updating existing GitHub issue #$EXISTING_ISSUE for SonarCloud issue $ISSUE_KEY"
            gh issue edit "$EXISTING_ISSUE" --title "$GITHUB_TITLE" --body "$GITHUB_BODY"
            echo "- Updated issue #$EXISTING_ISSUE: $ISSUE_KEY" >> sync_report.md
            UPDATED_COUNT=$((UPDATED_COUNT + 1))
          else
            echo "Creating new GitHub issue for SonarCloud issue $ISSUE_KEY"
            NEW_ISSUE=$(gh issue create --title "$GITHUB_TITLE" --body "$GITHUB_BODY" --label "sonarcloud,technical-debt")
            echo "- Created new issue $NEW_ISSUE: $ISSUE_KEY" >> sync_report.md
            CREATED_COUNT=$((CREATED_COUNT + 1))
          fi
          
          SYNCED_COUNT=$((SYNCED_COUNT + 1))
        done
        
        echo "" >> sync_report.md
        echo "## Summary" >> sync_report.md
        echo "- Total issues processed: $SYNCED_COUNT" >> sync_report.md
        echo "- New issues created: $CREATED_COUNT" >> sync_report.md
        echo "- Existing issues updated: $UPDATED_COUNT" >> sync_report.md
    
    - name: Create issue report
      run: |
        echo "📊 SonarCloud Issue Synchronization completed"
        
        if [ -f sync_report.md ]; then
          echo "=== Sync Report ==="
          cat sync_report.md
          
          # Optionally, create a GitHub issue with the sync report
          if [ "${{ github.event_name }}" == "schedule" ]; then
            echo "Creating weekly sync report issue..."
            REPORT_TITLE="Weekly SonarCloud Issue Sync Report - $(date +'%Y-%m-%d')"
            gh issue create --title "$REPORT_TITLE" --body-file sync_report.md --label "automation,sonarcloud-sync"
          fi
        else
          echo "No sync report generated - likely no issues found or processed"
        fi
        
        echo "✅ Issue synchronization process completed"

  notify-completion:
    name: Notify CI Completion
    runs-on: ubuntu-latest
    needs: [test-javascript, test-python, test-java, sonarcloud]
    if: always()
    
    steps:
    - name: Check CI Status
      run: |
        echo "JavaScript Tests: ${{ needs.test-javascript.result }}"
        echo "Python Tests: ${{ needs.test-python.result }}"
        echo "Java Tests: ${{ needs.test-java.result }}"
        echo "SonarCloud Analysis: ${{ needs.sonarcloud.result }}"
        
        if [[ "${{ needs.test-javascript.result }}" == "success" && "${{ needs.test-python.result }}" == "success" && "${{ needs.test-java.result }}" == "success" ]]; then
          echo "✅ All critical tests passed!"
        else
          echo "❌ Some tests failed"
          exit 1
        fi
