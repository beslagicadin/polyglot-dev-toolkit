name: SonarCloud Issue Sync

on:
  workflow_dispatch:
    inputs:
      run_sonarqube_sync:
        description: 'Force run SonarQube issue sync'
        required: false
        default: 'true'
        type: boolean

env:
  SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
  GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

permissions:
  issues: write
  contents: read

jobs:
  sync-sonarqube-issues:
    name: Sync SonarQube Issues
    runs-on: ubuntu-latest
    if: ${{ github.event.inputs.run_sonarqube_sync == 'true' }}
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Install required tools
      run: |
        echo "Installing required tools for SonarCloud issue synchronization..."
        # Install jq for JSON parsing
        sudo apt-get update
        sudo apt-get install -y jq curl
        
        # Install GitHub CLI
        curl -fsSL https://cli.github.com/packages/githubcli-archive-keyring.gpg | sudo dd of=/usr/share/keyrings/githubcli-archive-keyring.gpg
        sudo chmod go+r /usr/share/keyrings/githubcli-archive-keyring.gpg
        echo "deb [arch=$(dpkg --print-architecture) signed-by=/usr/share/keyrings/githubcli-archive-keyring.gpg] https://cli.github.com/packages stable main" | sudo tee /etc/apt/sources.list.d/github-cli.list > /dev/null
        sudo apt-get update
        sudo apt-get install -y gh
    
    - name: Fetch and Sync SonarCloud Issues
      shell: bash
      run: |
        echo "Fetching issues from SonarCloud..."
        
        # Extract organization and project key from repository
        GITHUB_ORG="$(echo $GITHUB_REPOSITORY | cut -d'/' -f1)"
        PROJECT_KEY="${GITHUB_ORG}_$(echo $GITHUB_REPOSITORY | cut -d'/' -f2)"
        
        echo "Using project key: $PROJECT_KEY"
        
        # Fetch issues from SonarCloud API
        # Note: You may need to adjust the project key format based on your SonarCloud setup
        SONAR_ISSUES_RESPONSE=$(curl -s -u "$SONAR_TOKEN:" \
          "https://sonarcloud.io/api/issues/search?componentKeys=$PROJECT_KEY&statuses=OPEN,CONFIRMED,REOPENED&types=BUG,VULNERABILITY,CODE_SMELL&ps=500")
        
        # Save the response for processing
        echo "$SONAR_ISSUES_RESPONSE" > sonar_issues.json
        
        # Check if we got valid data
        if ! echo "$SONAR_ISSUES_RESPONSE" | jq -e '.issues' > /dev/null 2>&1; then
          echo "‚ùå Failed to fetch SonarCloud issues or no issues found"
          echo "Response: $SONAR_ISSUES_RESPONSE"
          exit 1
        fi
        
        ISSUE_COUNT=$(echo "$SONAR_ISSUES_RESPONSE" | jq '.issues | length')
        echo "Found $ISSUE_COUNT SonarCloud issues"
        
        if [ "$ISSUE_COUNT" -eq 0 ]; then
          echo "No issues to sync"
          exit 0
        fi
        
        echo "Syncing SonarCloud issues to GitHub..."
        
        # Authenticate with GitHub CLI
        echo "$GITHUB_TOKEN" | gh auth login --with-token
        
        # Create a sync report file
        echo "# SonarCloud Issue Sync Report" > sync_report.md
        echo "Synchronized on: $(date)" >> sync_report.md
        echo "" >> sync_report.md
        
        SYNCED_COUNT=0
        UPDATED_COUNT=0
        CREATED_COUNT=0
        
        # Check if sonar_issues.json exists
        if [ ! -f "sonar_issues.json" ]; then
          echo "‚ùå Error: sonar_issues.json file not found!"
          echo "Current directory: $(pwd)"
          echo "Files in current directory:"
          ls -la
          exit 1
        fi
        
        echo "‚úÖ Found sonar_issues.json file"
        echo "File size: $(wc -c < sonar_issues.json) bytes"
        
        # Process each SonarCloud issue using a simple approach
        echo "Creating temp file from sonar_issues.json..."
        if ! jq -c '.issues[]' sonar_issues.json > issues_temp.txt; then
          echo "‚ùå Error: Failed to process sonar_issues.json with jq"
          echo "JSON content preview:"
          head -5 sonar_issues.json
          exit 1
        fi
        
        echo "Checking temp file content..."
        echo "Lines in temp file: $(wc -l < issues_temp.txt)"
        if [ -s issues_temp.txt ]; then
          echo "First line: $(head -1 issues_temp.txt)"
        else
          echo "‚ùå Warning: temp file is empty!"
        fi
        
        # Process first few issues for testing
        SYNCED_COUNT=0
        UPDATED_COUNT=0
        CREATED_COUNT=0
        
        # Process up to 5 issues for testing
        head -5 issues_temp.txt | while IFS= read -r issue; do
          echo "Processing issue line..."
          
          # Extract issue details with error checking and sanitization
          ISSUE_KEY=$(echo "$issue" | jq -r '.key' | tr -d '\n\r')
          ISSUE_TYPE=$(echo "$issue" | jq -r '.type' | tr -d '\n\r')
          ISSUE_SEVERITY=$(echo "$issue" | jq -r '.severity' | tr -d '\n\r')
          ISSUE_MESSAGE=$(echo "$issue" | jq -r '.message' | tr -d '\n\r' | head -c 200)
          ISSUE_COMPONENT=$(echo "$issue" | jq -r '.component' | tr -d '\n\r')
          ISSUE_LINE=$(echo "$issue" | jq -r '.line // "N/A"' | tr -d '\n\r')
          ISSUE_STATUS=$(echo "$issue" | jq -r '.status' | tr -d '\n\r')
          
          echo "Found issue: $ISSUE_KEY ($ISSUE_TYPE)"
          
          # Sanitize and truncate title to avoid API issues
          SAFE_MESSAGE=$(echo "$ISSUE_MESSAGE" | head -c 100)
          GITHUB_TITLE="[SonarCloud] $ISSUE_TYPE: $SAFE_MESSAGE"
          
          # Create GitHub issue body using printf to avoid escaping issues
          printf "## SonarCloud Issue Details\n\n**Issue Key:** \`%s\`\n**Type:** %s\n**Severity:** %s\n**Status:** %s\n**Component:** \`%s\`\n**Line:** %s\n\n**Message:** %s\n\n---\n*This issue was automatically synchronized from SonarCloud.*\n*SonarCloud Issue Key: %s*" "$ISSUE_KEY" "$ISSUE_TYPE" "$ISSUE_SEVERITY" "$ISSUE_STATUS" "$ISSUE_COMPONENT" "$ISSUE_LINE" "$ISSUE_MESSAGE" "$ISSUE_KEY" > issue_body.tmp
          
          # Check if GitHub issue already exists (search by SonarCloud key)
          echo "Checking for existing issue with key: $ISSUE_KEY"
          EXISTING_ISSUE=$(gh issue list --search "$ISSUE_KEY in:body" --json number --jq '.[0].number // empty' 2>/dev/null || echo "")
          
          if [ -n "$EXISTING_ISSUE" ] && [ "$EXISTING_ISSUE" != "null" ] && [ "$EXISTING_ISSUE" != "" ]; then
            echo "Updating existing GitHub issue #$EXISTING_ISSUE for SonarCloud issue $ISSUE_KEY"
            if gh issue edit "$EXISTING_ISSUE" --title "$GITHUB_TITLE" --body-file issue_body.tmp 2>/dev/null; then
              echo "‚úÖ Updated issue #$EXISTING_ISSUE: $ISSUE_KEY" >> sync_report.md
              UPDATED_COUNT=$((UPDATED_COUNT + 1))
            else
              echo "‚ùå Failed to update issue #$EXISTING_ISSUE for $ISSUE_KEY"
            fi
          else
            echo "Creating new GitHub issue for SonarCloud issue $ISSUE_KEY"
            if NEW_ISSUE=$(gh issue create --title "$GITHUB_TITLE" --body-file issue_body.tmp --label "sonarcloud,technical-debt" 2>/dev/null); then
              echo "‚úÖ Created new issue $NEW_ISSUE for $ISSUE_KEY" >> sync_report.md
              CREATED_COUNT=$((CREATED_COUNT + 1))
            else
              echo "‚ùå Failed to create issue for $ISSUE_KEY"
              echo "Debug - Title: $GITHUB_TITLE"
              echo "Debug - Body preview:" 
              head -3 issue_body.tmp
            fi
          fi
          
          # Clean up temp file
          rm -f issue_body.tmp
          
          SYNCED_COUNT=$((SYNCED_COUNT + 1))
        done
        
        echo "Processed $SYNCED_COUNT issues for testing"
        
        echo "" >> sync_report.md
        echo "## Summary" >> sync_report.md
        echo "- Total issues processed: $SYNCED_COUNT" >> sync_report.md
        echo "- New issues created: $CREATED_COUNT" >> sync_report.md
        echo "- Existing issues updated: $UPDATED_COUNT" >> sync_report.md
        
        echo "‚úÖ Processed $SYNCED_COUNT issues, created $CREATED_COUNT new, updated $UPDATED_COUNT existing"
    
    - name: Create issue report
      run: |
        echo "üìä SonarCloud Issue Synchronization completed"
        
        if [ -f sync_report.md ]; then
          echo "=== Sync Report ==="
          cat sync_report.md
        else
          echo "No sync report generated - likely no issues found or processed"
        fi
        
        echo "‚úÖ Issue synchronization process completed"

