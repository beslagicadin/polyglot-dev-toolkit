name: Continuous Integration

on:
  push:
    branches: [ master, main, develop ]
  pull_request:
    branches: [ master, main ]
  release:
    types: [published]

jobs:
  test-python:
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest, windows-latest, macos-latest]
        python-version: ['3.8', '3.9', '3.10', '3.11', '3.12']
        exclude:
          # Exclude some combinations to reduce job count
          - os: windows-latest
            python-version: '3.8'
          - os: macos-latest
            python-version: '3.8'

    steps:
    - uses: actions/checkout@v3
    
    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ matrix.python-version }}
    
    - name: Cache pip dependencies
      uses: actions/cache@v3
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt') }}
        restore-keys: |
          ${{ runner.os }}-pip-
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements-ci.txt
    
    - name: Lint with flake8
      run: |
        # Stop the build if there are Python syntax errors or undefined names
        flake8 src/python --count --select=E9,F63,F7,F82 --show-source --statistics
        # Exit-zero treats all errors as warnings
        flake8 src/python --count --exit-zero --max-complexity=10 --max-line-length=88 --statistics
    
    - name: Format check with black
      run: |
        black --check src/python
    
    - name: Import sorting check with isort
      run: |
        isort --check-only src/python
    
    - name: Type checking with mypy
      run: |
        mypy src/python --ignore-missing-imports --check-untyped-defs
    
    - name: Test with pytest
      run: |
        pytest tests/ -v --cov=src/python --cov-report=xml --cov-report=html
    
    - name: Upload Python coverage to Codecov
      uses: codecov/codecov-action@v5
      if: matrix.os == 'ubuntu-latest' && matrix.python-version == '3.10'
      with:
        token: ${{ secrets.CODECOV_TOKEN }}
        files: ./coverage.xml
        flags: python
        name: codecov-python

  test-javascript:
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest, windows-latest, macos-latest]
        node-version: ['18', '20']
    
    steps:
    - uses: actions/checkout@v3
    
    - name: Set up Node.js
      uses: actions/setup-node@v3
      with:
        node-version: ${{ matrix.node-version }}
        cache: 'npm'
    
    - name: Install dependencies
      run: npm ci

    - name: Lint JavaScript
      run: npm run lint

    - name: Run JavaScript tests with coverage
      run: npx jest --coverage --passWithNoTests

    - name: Upload JavaScript coverage to Codecov
      uses: codecov/codecov-action@v5
      if: matrix.os == 'ubuntu-latest' && matrix.node-version == '20'
      with:
        token: ${{ secrets.CODECOV_TOKEN }}
        files: ./coverage/lcov.info
        flags: javascript
        name: codecov-javascript

    - name: Scan JS vulnerabilities
      run: npm audit --production

  test-java:
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest, windows-latest, macos-latest]
    
    steps:
    - uses: actions/checkout@v3
    
    - name: Set up JDK 17
      uses: actions/setup-java@v3
      with:
        java-version: '17'
        distribution: 'temurin'
    
    - name: Cache Maven dependencies
      uses: actions/cache@v3
      with:
        path: ~/.m2
        key: ${{ runner.os }}-m2-${{ hashFiles('**/pom.xml') }}
        restore-keys: ${{ runner.os }}-m2
    
    - name: Run Maven tests
      run: |
        mvn test
    
    - name: Generate coverage report
      run: |
        mvn jacoco:report

    - name: Scan Java dependencies
      if: matrix.os == 'ubuntu-latest'  # Restrict to known environment for security
      run: |
        echo "Java dependency scanning placeholder - OWASP Dependency Check would go here"
        echo "For now, we'll use basic security checks"
        find . -name "*.jar" -o -name "pom.xml" -o -name "build.gradle" | head -10

  security-scan:
    runs-on: ubuntu-latest
    permissions:
      security-events: write
      actions: read
      contents: read
    
    steps:
    - uses: actions/checkout@v3
    
    - name: Run Trivy vulnerability scanner
      uses: aquasecurity/trivy-action@master
      with:
        scan-type: 'fs'
        scan-ref: '.'
        format: 'sarif'
        output: 'trivy-results.sarif'
    
    - name: Upload Trivy scan results to GitHub Security tab
      uses: github/codeql-action/upload-sarif@v3
      if: always()
      with:
        sarif_file: 'trivy-results.sarif'

  code-quality:
    runs-on: ubuntu-latest
    needs: [test-python, test-javascript, test-java]
    
    steps:
    - uses: actions/checkout@v3
      with:
        fetch-depth: 0  # Full history needed for Code Climate
    
    - name: Set up Python for Code Climate
      uses: actions/setup-python@v4
      with:
        python-version: '3.10'
    
    - name: Set up Node.js for Code Climate
      uses: actions/setup-node@v3
      with:
        node-version: '20'
    
    - name: Install Python dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements-ci.txt
    
    - name: Install JavaScript dependencies
      run: npm ci
    
    - name: Run Python tests with coverage for Code Climate
      run: |
        pytest tests/ -v --cov=src/python --cov-report=xml
    
    - name: Run JavaScript tests with coverage for Code Climate
      run: |
        npx jest --coverage --passWithNoTests
    
    - name: Download Code Climate test reporter
      run: |
        curl -L https://codeclimate.com/downloads/test-reporter/test-reporter-latest-linux-amd64 > ./cc-test-reporter
        chmod +x ./cc-test-reporter
    
    - name: Format coverage reports for Code Climate
      run: |
        # Format Python coverage
        ./cc-test-reporter format-coverage -t coverage.py -o coverage/codeclimate.python.json coverage.xml
        # Format JavaScript coverage
        ./cc-test-reporter format-coverage -t lcov -o coverage/codeclimate.javascript.json coverage/lcov.info
    
    - name: Upload coverage to Code Climate
      env:
        CC_TEST_REPORTER_ID: ${{ secrets.CC_TEST_REPORTER_ID }}
      run: |
        ./cc-test-reporter sum-coverage coverage/codeclimate.*.json -p 2 -o coverage/codeclimate.total.json
        ./cc-test-reporter upload-coverage -i coverage/codeclimate.total.json

  deploy-docs:
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main'
    needs: [test-python, test-javascript, test-java]
    
    steps:
    - uses: actions/checkout@v3
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.10'
    
    - name: Install documentation dependencies
      run: |
        pip install sphinx sphinx-rtd-theme
    
    - name: Build documentation
      run: |
        cd docs
        make html
    
    - name: Deploy to GitHub Pages
      uses: peaceiris/actions-gh-pages@v3
      with:
        github_token: ${{ secrets.GITHUB_TOKEN }}
        publish_dir: ./docs/_build/html

  performance-test:
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v3
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.10'
    
    - name: Install dependencies
      run: |
        pip install -r requirements.txt
        pip install pytest-benchmark
    
    - name: Run performance tests
      run: |
        python scripts/performance_test.py

  auto-merge:
    runs-on: ubuntu-latest
    needs: [test-python, test-javascript, test-java, security-scan]
    if: |
      github.event_name == 'pull_request' &&
      github.actor == 'dependabot[bot]' &&
      contains(github.event.pull_request.head.ref, 'dependabot/')
    
    steps:
    - name: Auto-merge Dependabot PRs
      uses: pascalgn/merge-action@v0.15.6
      with:
        github_token: ${{ secrets.GITHUB_TOKEN }}
        merge_method: squash
